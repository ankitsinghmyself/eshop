// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Products {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  details            String?
  price              Float
  discountPercentage Float?   @default(0.0)
  img                String
  quantity           Int
  favorite           Boolean  @default(false)
  rating             Int      @default(0)
  published          Boolean  @default(false)
  authorId           String?  @db.ObjectId
  isActive           Boolean  @default(true)
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  bio    String?
  userId String  @unique @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String?
  middleName    String?
  birthdate     DateTime?
  gender        String?
  address       String?
  phone         String?
  website       String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Profile       Profile?
  Cart          Cart[]
  orders        Order[]
  Session       Session[]
  Account       Account[]
  Authenticator Authenticator[]
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  items  Json
  user   User   @relation(fields: [userId], references: [id])
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  items     Json
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}
